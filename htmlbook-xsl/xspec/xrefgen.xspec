<?xml version="1.0" encoding="UTF-8"?>

<x:description xmlns:x="http://www.jenitennison.com/xslt/xspec"
               xmlns:functx="http://www.functx.com"
	       xmlns="http://www.w3.org/1999/xhtml"
	       xmlns:ncx="http://www.daisy.org/z3986/2005/ncx/"
	       xmlns:h="http://www.w3.org/1999/xhtml"
	       xmlns:e="http://github.com/oreillymedia/epubrenderer"
               stylesheet="../htmlbook.xsl">
  
  <!-- Globally setting url.in.parens to 0 here; tests for url.in.parens handling below modify param value on a oneoff basis -->
  <x:param name="url.in.parens" select="0"/>

  <!-- Globally setting autogenerate.xref.pagenum.style to be 1 here; specific tests for data-xref-pagenum-style handling below modify
       param value on a oneoff basis -->
  <x:param name="autogenerate.xref.pagenum.style" select="1"/>

  <!-- Globally setting xref.elements.pagenum.in.class to be empty here; specific tests for pagenum class handling below modify param value on a oneoff basis -->
  <x:param name="xref.elements.pagenum.in.class"/>

  <!-- Global param settings for data-xref-pagenum-style attribute -->
  <x:param name="xref.pagenum.style.for.section.by.data-type">
acknowledgments:decimal
afterword:decimal
appendix:decimal
bibliography:decimal
chapter:decimal
colophon:decimal
conclusion:decimal
copyright-page:decimal
dedication:lower-roman
foreword:lower-roman
glossary:decimal
halftitlepage:lower-roman
index:decimal
introduction:decimal
preface:lower-roman
titlepage:lower-roman
toc:lower-roman
  </x:param>

  <!-- Tests around text nodes for formal XREF elements (those with data-type='xref') -->
  <x:scenario label="When *empty* XREF element is matched">
    <x:context select="(//h:section//h:a[@data-type='xref'])[1]">
      <section id="chapter1" data-type="chapter">
	<p>Here comes a cross-reference: see <a data-type="xref" href="#chapter1"/></p>
      </section>
    </x:context>
    
    <x:scenario label="And autogenerate-xrefs param is disabled">
      <x:context>
	<x:param name="autogenerate-xrefs" select="0"/>
      </x:context>
      <x:expect label="No XREF text node should be generated">
	<a data-type="xref" href="..."/>
      </x:expect>
    </x:scenario>
    
    <x:scenario label="And autogenerate-xrefs param is enabled" pending="We received an  error when trying to run this scenario.
We were using the Saxon JAR file version SAXON HE 9.5.1.2
and the script from https://github.com/xspec/xspec.">
      <x:context>
	<x:param name="autogenerate-xrefs" select="1"/>
      </x:context>
      <!-- Content based on params set globally for this spec doc and localization gentext -->
      <!-- If localizations change, test may produce false negative -->
      <x:expect label="XREF text node should be generated with proper content">
	<a data-type="xref" href="..." data-xref-pagenum-style="...">Chapter 1</a>
      </x:expect>
    </x:scenario>    
  </x:scenario>

  <x:scenario label="When *nonempty* XREF element is matched">
    <x:context select="(//h:section//h:a[@data-type='xref'])[1]">
      <section id="chapter1" data-type="chapter">
	<p>Here comes a cross-reference: see <a data-type="xref" href="#chapter1">PLACEHOLDER</a></p>
      </section>
    </x:context>
    
    <x:scenario label="And autogenerate-xrefs param is disabled">
      <x:context>
	<x:param name="autogenerate-xrefs" select="0"/>
      </x:context>
      <x:expect label="No XREF text node should be generated">
	<a data-type="xref" href="...">PLACEHOLDER</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="And autogenerate-xrefs param is enabled" pending="We received an  error when trying to run this scenario.
We were using the Saxon JAR file version SAXON HE 9.5.1.2
and the script from https://github.com/xspec/xspec.">
      <x:context>
	<x:param name="autogenerate-xrefs" select="1"/>
      </x:context>
      <!-- Content based on params set globally for this spec doc and localization gentext -->
      <!-- If localizations change, test may produce false negative -->
      <x:expect label="XREF text node should be generated with proper content">
	<a data-type="xref" href="..." data-xref-pagenum-style="...">Chapter 1</a>
      </x:expect>
    </x:scenario>
  </x:scenario>

  <x:scenario label="When an XREF points to an id in another location">
    <x:context>
      <section id="chapter1" data-type="chapter">
	<p>Here comes an XREF with an href pointing to another file: <a data-type="xref" id="empty_another_file" href="ch01.html#chapter1"/></p>
	<p>Another XREF with an href pointing to another file: <a data-type="xref" id="nonempty_another_file" href="ch01.html#chapter1">PLACEHOLDER</a></p>
	<p>XREF pointing to a URL <a data-type="xref" id="empty_web_url" href="http://oreilly.com/index.html#chapter1"/></p>
	<p>Another XREF with an href pointing to another file: <a data-type="xref" id="nonempty_web_url" href="http://oreilly.com/index.html#chapter1">PLACEHOLDER</a></p>
      </section>
    </x:context>

    <x:scenario label="Which is another local file (text node of XREF empty)" pending="We received an  error when trying to run this scenario.
We were using the Saxon JAR file version SAXON HE 9.5.1.2
and the script from https://github.com/xspec/xspec.">
      <x:context select="//h:a[@id='empty_another_file']"/>
      <!-- Content based on params set globally for this spec doc and localization gentext -->
      <!-- If localizations change, test may produce false negative -->
      <x:expect label="XREF text node should be generated with proper content">
	<a data-type="xref" id="empty_another_file" href="..." data-xref-pagenum-style="...">Chapter 1</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="Which is another local file (text node of XREF nonempty)" pending="We received an  error when trying to run this scenario.
We were using the Saxon JAR file version SAXON HE 9.5.1.2
and the script from https://github.com/xspec/xspec.">
      <x:context select="//h:a[@id='nonempty_another_file']"/>
      <!-- Content based on params set globally for this spec doc and localization gentext -->
      <!-- If localizations change, test may produce false negative -->
      <x:expect label="XREF text node should be generated with proper content">
	<a data-type="xref" id="nonempty_another_file" href="..." data-xref-pagenum-style="...">Chapter 1</a>
      </x:expect>
    </x:scenario>

    <!-- For now, we're arguing that if the @href value is not a legit XREF, 
	 that should override the fact that data-type="xref" is on the <a> -->
    <x:scenario label="Which is a Web URL instead of a valid XREF (text node empty)">
      <x:context select="//h:a[@id='empty_web_url']"/>
      <x:expect label="XREF text node should be left untouched">
	<a data-type="xref" id="empty_web_url" href="..."/>
      </x:expect>
    </x:scenario>

    <x:scenario label="Which is a Web URL instead of a valid XREF (text node nonempty)">
      <x:context select="//h:a[@id='nonempty_web_url']"/>
      <x:expect label="XREF text node should be left untouched">
	<a data-type="xref" id="nonempty_web_url" href="...">PLACEHOLDER</a>
      </x:expect>
    </x:scenario>

  </x:scenario>


  <x:scenario label="When an XREF has a bogus href">
    <x:context>
      <section id="chapter1" data-type="chapter">
	<p>Here comes a bogus cross-reference: see <a data-type="xref" id="empty_bogus" href="#bogusbogus"/></p>
	<p>Another bogus cross-referece: see <a data-type="xref" id="empty_file_bogus" href="ch01.html#bogus"/></p>
	<p>Third bogus cross-reference: see <a data-type="xref" id="nonempty_bogus" href="#bogusbogus">I do believe this is bogus</a></p>
	<p>Fourth bogus cross-reference: See <a data-type="xref" id="nonempty_file_bogus" href="ch01.html#bogus">I do believe this is bogus</a></p>
      </section>
    </x:context>
    
    <x:scenario label="And an empty text node">
      <x:context select="//h:a[@id='empty_bogus']"/>
      <x:expect label="Three question marks should be used for text node">
	<a data-type="xref" id="empty_bogus" href="...">???</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="Referencing another file and has an empty text node">
      <x:context select="//h:a[@id='empty_file_bogus']"/>
      <x:expect label="Three question marks should be used for text node">
	<a data-type="xref" id="empty_file_bogus" href="...">???</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="And a nonempty text node">
      <x:context select="//h:a[@id='nonempty_bogus']"/>
      <x:expect label="Three question marks should be used for text node">
	<a data-type="xref" id="nonempty_bogus" href="...">???</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="Referencing another file and has a nonempty text node">
      <x:context select="//h:a[@id='nonempty_file_bogus']"/>
      <x:expect label="Three question marks should be used for text node">
	<a data-type="xref" id="nonempty_file_bogus" href="...">???</a>
      </x:expect>
    </x:scenario>
  </x:scenario>

  <x:scenario label="When an XREF points to a refentry">
    <x:context mode="xref-to">
      <div class="refentry">
	<header>
	  <p class="refname">print</p>
	  <p class="refpurpose">Output some text to stdout.</p>
	</header>
	<div class="refsynopsisdiv">
	  <pre class="synopsis">print "<em>Hello World</em>"</pre>
	</div>
	<div class="refsect1">
	  <h6>Description</h6>
	  <p>More description would go here</p>
	</div>
      </div>
    </x:context>
    <x:expect label="Generated text should be refname tagged as code"><code class="refentry">print</code></x:expect>
  
  </x:scenario>
  
  <x:scenario label="When an XREF points to a refentry that has other roles">
    <x:context mode="xref-to">
      <div class="refentry pagebreak-before refentry_nospace">
        <header>
          <p class="refname">print</p>
          <p class="refpurpose">Output some text to stdout.</p>
        </header>
        <div class="refsynopsisdiv">
          <pre class="synopsis">print "<em>Hello World</em>"</pre>
        </div>
        <div class="refsect1">
          <h6>Description</h6>
          <p>More description would go here</p>
        </div>
      </div>
    </x:context>
    <x:expect label="Generated text should be refname tagged as code"><code class="refentry">print</code></x:expect>
    
  </x:scenario>
  
  <x:scenario label="When an XREF points to a refentry without a refname 'p'">
    <x:context mode="xref-to">
      <div class="refentry">
	<header>
	  <p class="refpurpose">Output some text to stdout.</p>
	</header>
	<div class="refsynopsisdiv">
	  <pre class="synopsis">print "<em>Hello World</em>"</pre>
	</div>
	<div class="refsect1">
	  <h6>Description</h6>
	  <p>More description would go here</p>
	</div>
      </div>
    </x:context>
    <x:expect label="Generated text should be question marks">???</x:expect>
  </x:scenario>
  
  <!--Chris's refsect work here -->
  <!-- <x:param name="xref.elements.pagenum.in.class" select="1"/> -->
  <x:scenario label="When an XREF points to a refsect1">
    <x:context mode="xref-to">
      <div class="refsect1">
        <h6>My Refsect1 Title</h6>
        <p>More description would go here</p>
      </div>
    </x:context>
    <x:expect label="Generated text should be the refsect1 title">“My Refsect1 Title”</x:expect>
    
  </x:scenario>
  
  <x:scenario label="When an XREF points to a refsect2">
    <x:context mode="xref-to">
      <div class="refsect2">
        <h6>My Refsect2 Title</h6>
        <p>More description would go here</p>
      </div>
    </x:context>
    <x:expect label="Generated text should be the refsect2 title">“My Refsect2 Title”</x:expect>
    
  </x:scenario>
  <!--End Chris's refsect work -->
  
  <!-- Begin Chris's Equation Work -->
  <x:scenario label="When an XREF points to a formal equation with a caption">
    <x:context mode="xref-to" select="(//h:div[@data-type='equation'])[2]">
  <section data-type="chapter">
        <div data-type="equation" id="formal_equation">
          <h5>I am a caption!</h5>
          <p data-type="tex">$2 + 2 = 4$</p>
        </div>
    <div data-type="equation" id="formal_equation2">
      <h5>I am a caption!</h5>
      <p data-type="tex">$2 + 2 = 4$</p>
    </div>
  </section>
    </x:context>
    <x:expect label="Gentext should be created for the xref">Equation 1-2</x:expect>
  </x:scenario>

  <x:scenario label="When an XREF points to a informal equation">
    <x:context mode="xref-to" select="(//h:div[@data-type='equation'])[1]">
      <section data-type="chapter">
      <div data-type="equation">
        <p data-type="tex">$2 + 2 = 4$</p>
      </div>
      </section>
    </x:context>
    <x:expect label="Gentext should be created for the xref">???</x:expect>
  </x:scenario>
  
  <x:scenario label="When an XREF points to a formal equation with no caption text">
    <x:context mode="xref-to" select="(//h:div[@data-type='equation'])[1]">
      <section data-type="chapter">
        <div data-type="equation" id="formal_equation">
          <h5/>
          <p data-type="tex">$2 + 2 = 4$</p>
        </div>
      </section>
    </x:context>
    <x:expect label="Gentext should be created for the xref">Equation 1-1</x:expect>
  </x:scenario>
  
<!-- Equation in a preface -->
  <x:scenario label="When an XREF points to a formal equation with no caption text">
    <x:context mode="xref-to" select="(//h:div[@data-type='equation'])[1]">
      <section data-type="preface">
        <div data-type="equation" id="formal_equation">
          <h5/>
          <p data-type="tex">$2 + 2 = 4$</p>
        </div>
      </section>
    </x:context>
    <x:expect label="Gentext should be created for the xref">Equation P-1</x:expect>
  </x:scenario>
  
 <!-- Equation in an appendix -->
  <x:scenario label="When an XREF points to a formal equation with no caption text">
    <x:context mode="xref-to"  select="(//h:div[@data-type='equation'])[3]">
      <section data-type="appendix">
        <div data-type="equation" id="formal_equation">
          <h5/>
          <p data-type="tex">$2 + 2 = 4$</p>
        </div>
        <div data-type="equation" id="formal_equation2">
          <p data-type="tex">$2 + 2 = 4$</p>
        </div>
        <div data-type="equation" id="formal_equation3">
          <h5/>
          <p data-type="tex">$2 + 2 = 4$</p>
        </div>
      </section>
    </x:context>
    <x:expect label="Gentext should be created for the xref">Equation A-2</x:expect>
  </x:scenario>
 <!-- Begin Chris's Equation work -->
  
  <!-- Tests for text nodes of <a> elements that do not have data-type="xref" -->
  <x:scenario label="If an 'a' element does not contain data-type='xref'">
    <x:context>
      <section id="chapter1" data-type="chapter">
	<a id="no_data_type" href="#chapter1">DO NOT TOUCH ME</a> <!-- Don't update this one -->
	<a id="link" data-type="link" href="#chapter1">DO NOT TOUCH ME</a> <!-- Don't update this one -->
	<a id="no_data_type_no_text" href="#chapter1"/> <!-- Update this one -->
	<a id="link_no_text" data-type="link" href="#chapter1"/> <!-- Don't update this one -->
	<a id="no_data_type_no_text_bogus_href" href="#bogus"/> <!-- Update this one -->
	<a id="link_no_text_bogus_href" data-type="link" href="#bogus"/> <!-- Don't update this one -->
	<a id="no_data_type_no_text_href_not_xref" href="http://oreilly.com"/> <!-- Don't update this one -->
	<a id="link_no_text_href_not_xref" data-type="link" href="http://oreilly.com"/> <!-- Don't update this one -->
      </section>
    </x:context>
    
    <x:scenario label="And has a text node already">
      <x:context select="//h:a[@id='no_data_type']"/>
      <x:expect label="Text node should not be modified">
	<a id="no_data_type" href="...">DO NOT TOUCH ME</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="And has a text node already (link)">
      <x:context select="//h:a[@id='link']"/>
      <x:expect label="Text node should not be modified">
	<a id="link" data-type="link" href="...">DO NOT TOUCH ME</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="And does not have a text node already, and has a valid XREF link" pending="We received an  error when trying to run this scenario.
We were using the Saxon JAR file version SAXON HE 9.5.1.2
and the script from https://github.com/xspec/xspec.">
      <x:context select="//h:a[@id='no_data_type_no_text']"/>
      <!-- Content based on params set globally for this spec doc and localization gentext -->
      <!-- If localizations change, test may produce false negative -->
      <x:expect label="Text node should be updated with proper gentext">
	<a id="no_data_type_no_text" href="..." data-xref-pagenum-style="...">Chapter 1</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="And does not have a text node already, but is a link with a valid XREF link">
      <x:context select="//h:a[@id='link_no_text']"/>
      <x:expect label="Text node should not be modified">
	<a id="link_no_text" data-type="link" href="..."/>
      </x:expect>
    </x:scenario>

    <x:scenario label="And does not have a text node already, and has a bogus XREF link">
      <x:context select="//h:a[@id='no_data_type_no_text_bogus_href']"/>
      <!-- Content based on params set globally for this spec doc and localization gentext -->
      <!-- If localizations change, test may produce false negative -->
      <x:expect label="Text node should be updated with question marks">
	<a id="no_data_type_no_text_bogus_href" href="...">???</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="And does not have a text node already, and is a link with a bogus XREF link">
      <x:context select="//h:a[@id='link_no_text_bogus_href']"/>
      <x:expect label="Text node should not be modified">
	<a id="link_no_text_bogus_href" data-type="link" href="..."/>
      </x:expect>
    </x:scenario>

    <x:scenario label="And does not have a text node already, and has an href that is not an XREF">
      <x:context select="//h:a[@id='no_data_type_no_text_href_not_xref']"/>
      <x:expect label="Text node should not be modified">
	<a id="no_data_type_no_text_href_not_xref" href="..."/>
      </x:expect>
    </x:scenario>

    <x:scenario label="And does not have a text node already, and is a link with an href that is not an XREF">
      <x:context select="//h:a[@id='link_no_text_href_not_xref']"/>
      <x:expect label="Text node should not be modified">
	<a id="link_no_text_href_not_xref" data-type="link" href="..."/>
      </x:expect>
    </x:scenario>
  </x:scenario>

  <!-- Tests for hrefs on a elems with data-type="XREF"  -->
  <x:scenario label="When an XREF element is matched that contains an href pointing to an id">
    <x:context>
      <section id="chapter1" data-type="chapter">
	<p>Here comes a cross-reference: see <a id="no_text_node" data-type="xref" href="#chapter1"/></p>
	<p>Here comes an XREF with a text node: see <a id="text_node" data-type="xref" href="#chapter1">PLACEHOLDER TEXT</a></p>
      </section>
    </x:context>
    <x:scenario label="And the XREF contains no text node" pending="We received an  error when trying to run this scenario.
We were using the Saxon JAR file version SAXON HE 9.5.1.2
and the script from https://github.com/xspec/xspec.">
      <x:context select="//h:a[@id='no_text_node']"/>
      <x:expect label="href attribute should be processed as expected">
	<a data-type="xref" id="no_text_node" href="#chapter1" data-xref-pagenum-style="...">...</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="And the XREF contains a text node" pending="We received an  error when trying to run this scenario.
We were using the Saxon JAR file version SAXON HE 9.5.1.2
and the script from https://github.com/xspec/xspec.">
      <x:context select="//h:a[@id='text_node']"/>
      <x:expect label="href attribute should be processed as expected">
	<a id="text_node" data-type="xref" href="#chapter1" data-xref-pagenum-style="...">...</a>
      </x:expect>
    </x:scenario>
  </x:scenario>

  <x:scenario label="When an XREF element is matched that contains an href pointing to an id (no initial #)">
    <x:context>
      <section id="chapter1" data-type="chapter">
	<p>Here comes a cross-reference: see <a id="no_text_node" data-type="xref" href="chapter1"/></p>
	<p>Here comes an XREF with a text node: see <a id="text_node" data-type="xref" href="chapter1">PLACEHOLDER TEXT</a></p>
      </section>
    </x:context>
    <x:scenario label="And the XREF contains no text node" pending="We received an  error when trying to run this scenario.
We were using the Saxon JAR file version SAXON HE 9.5.1.2
and the script from https://github.com/xspec/xspec.">
      <x:context select="//h:a[@id='no_text_node']"/>
      <x:expect label="href attribute should be processed as expected">
	<a data-type="xref" id="no_text_node" href="#chapter1" data-xref-pagenum-style="...">...</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="And the XREF contains a text node" pending="We received an  error when trying to run this scenario.
We were using the Saxon JAR file version SAXON HE 9.5.1.2
and the script from https://github.com/xspec/xspec.">
      <x:context select="//h:a[@id='text_node']"/>
      <x:expect label="href attribute should be processed as expected">
	<a id="text_node" data-type="xref" href="#chapter1" data-xref-pagenum-style="...">...</a>
      </x:expect>
    </x:scenario>
  </x:scenario>

  <x:scenario label="When an XREF element is matched that contains an href pointing to a file/id">
    <x:context>
      <section id="chapter1" data-type="chapter">
	<p>Here comes a cross-reference: see <a id="no_text_node" data-type="xref" href="ch01.html#chapter1"/></p>
	<p>Here comes an XREF with a text node: see <a id="text_node" data-type="xref" href="ch01.html#chapter1">PLACEHOLDER TEXT</a></p>
      </section>
    </x:context>
    <x:scenario label="And the XREF contains no text node" pending="We received an  error when trying to run this scenario.
We were using the Saxon JAR file version SAXON HE 9.5.1.2
and the script from https://github.com/xspec/xspec.">
      <x:context select="//h:a[@id='no_text_node']"/>
      <x:expect label="href attribute should be processed as expected">
	<a data-type="xref" id="no_text_node" href="#chapter1" data-xref-pagenum-style="...">...</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="And the XREF contains a text node" pending="We received an  error when trying to run this scenario.
We were using the Saxon JAR file version SAXON HE 9.5.1.2
and the script from https://github.com/xspec/xspec.">
      <x:context select="//h:a[@id='text_node']"/>
      <x:expect label="href attribute should be processed as expected">
	<a id="text_node" data-type="xref" href="#chapter1" data-xref-pagenum-style="...">...</a>
      </x:expect>
    </x:scenario>
  </x:scenario>

  <x:scenario label="When an XREF element is matched that contains an href pointing to a Web URL (not a valid XREF)">
    <x:context>
      <section id="chapter1" data-type="chapter">
	<p>Here comes a cross-reference: see <a id="no_text_node" data-type="xref" href="http://oreilly.com/whatever.html#chapter1"/></p>
	<p>Here comes an XREF with a text node: see <a id="text_node" data-type="xref" href="http://oreilly.com/whatever.html#chapter1">PLACEHOLDER TEXT</a></p>
      </section>
    </x:context>
    <x:scenario label="And the XREF contains no text node">
      <x:context select="//h:a[@id='no_text_node']"/>
      <x:expect label="href attribute should be left untouched">
	<a data-type="xref" id="no_text_node" href="http://oreilly.com/whatever.html#chapter1">...</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="And the XREF contains a text node">
      <x:context select="//h:a[@id='text_node']"/>
      <x:expect label="href attribute should be left untouched">
	<a id="text_node" data-type="xref" href="http://oreilly.com/whatever.html#chapter1">...</a>
      </x:expect>
    </x:scenario>
  </x:scenario>

  <x:scenario label="When an XREF element is matched that contains an href pointing to a mailto URL (not a valid XREF)">
    <x:context>
      <section id="chapter1" data-type="chapter">
	<p>Here comes a cross-reference: see <a id="no_text_node" data-type="xref" href="mailto:tools@oreilly.com"/></p>
	<p>Here comes an XREF with a text node: see <a id="text_node" data-type="xref" href="mailto:tools@oreilly.com">PLACEHOLDER TEXT</a></p>
      </section>
    </x:context>
    <x:scenario label="And the XREF contains no text node">
      <x:context select="//h:a[@id='no_text_node']"/>
      <x:expect label="href attribute should be left untouched">
	<a data-type="xref" id="no_text_node" href="mailto:tools@oreilly.com">...</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="And the XREF contains a text node">
      <x:context select="//h:a[@id='text_node']"/>
      <x:expect label="href attribute should be left untouched">
	<a id="text_node" data-type="xref" href="mailto:tools@oreilly.com">...</a>
      </x:expect>
    </x:scenario>
  </x:scenario>

  <x:scenario label="When an XREF element is matched that contains an href pointing to a bogus id">
    <x:context>
      <section id="chapter1" data-type="chapter">
	<p>Here comes a bogus cross-reference: see <a id="bogus_no_text_node" data-type="xref" href="#bogus"/></p>
	<p>Here comes a bogus cross-reference with a text node: see <a id="bogus_text_node" data-type="xref" href="#bogus">PLACEHOLDER TEXT</a></p>
	<p>Here comes a bogus cross-reference (random text): see <a id="random_bogus_no_text_node" data-type="xref" href="random_bogus_text"/></p>
	<p>Here comes a bogus cross-reference (random text) with a text node: see <a id="random_bogus_text_node" data-type="xref" href="random_bogus_text">PLACEHOLDER TEXT</a></p>
	<p>Here comes a bogus cross-reference (random text): see <a id="fileref_bogus_no_text_node" data-type="xref" href="ch01.html#bogus"/></p>
	<p>Here comes a bogus cross-reference (random text) with a text node: see <a id="fileref_bogus_text_node" data-type="xref" href="ch01.html#bogus">PLACEHOLDER TEXT</a></p>
      </section>
    </x:context>
    
    <x:scenario label="Where id doesn't exist (no text node)">
      <x:context select="//h:a[@id = 'bogus_no_text_node']"/>
      <x:expect label="href should resolve to # sign and content that follows">
	<a id="bogus_no_text_node" data-type="xref" href="#bogus">...</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="Where id doesn't exist (text node)">
      <x:context select="//h:a[@id = 'bogus_text_node']"/>
      <x:expect label="href should resolve to # sign and content that follows">
	<a id="bogus_text_node" data-type="xref" href="#bogus">...</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="Where id doesn't exist and no # sign (no text node)">
      <x:context select="//h:a[@id = 'random_bogus_no_text_node']"/>
      <x:expect label="existing href should be prepended by a # sign">
	<a id="random_bogus_no_text_node" data-type="xref" href="#random_bogus_text">...</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="Where id doesn't exist and no # sign (text node)">
      <x:context select="//h:a[@id = 'random_bogus_text_node']"/>
      <x:expect label="existing href should be prepended by a # sign">
	<a id="random_bogus_text_node" data-type="xref" href="#random_bogus_text">...</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="Where href is a bogus file/id pair (no text node)">
      <x:context select="//h:a[@id = 'fileref_bogus_no_text_node']"/>
      <x:expect label="href should resolve to # sign and content that follows">
	<a id="fileref_bogus_no_text_node" data-type="xref" href="#bogus">...</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="Where href is a bogus file/id pair (text node)">
      <x:context select="//h:a[@id = 'fileref_bogus_text_node']"/>
      <x:expect label="href should resolve to # sign and content that follows">
	<a id="fileref_bogus_text_node" data-type="xref" href="#bogus">...</a>
      </x:expect>
    </x:scenario>
  </x:scenario>

  <!-- Tests for hrefs on a elems without data-type="xref"  -->
  <x:scenario label="When an 'a' element is matched that contains an href pointing to an id">
    <x:context>
      <section id="chapter1" data-type="chapter">
	<p>Here comes a cross-reference: see <a id="no_text_node" href="#chapter1"/></p>
	<p>Here comes an XREF with a text node: see <a id="text_node" href="#chapter1">PLACEHOLDER TEXT</a></p>
	<p>Here comes a cross-reference (link): see <a id="no_text_node_link" data-type="link" href="#chapter1"/></p>
	<p>Here comes an XREF (link) with a text node: see <a id="text_node_link" data-type="link" href="#chapter1">PLACEHOLDER TEXT</a></p>
      </section>
    </x:context>
    <x:scenario label="And the 'a' contains no text node" pending="We received an  error when trying to run this scenario.
We were using the Saxon JAR file version SAXON HE 9.5.1.2
and the script from https://github.com/xspec/xspec.">
      <x:context select="//h:a[@id='no_text_node']"/>
      <x:expect label="href attribute should be processed as expected">
	<a id="no_text_node" href="#chapter1" data-xref-pagenum-style="...">...</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="And the 'a' contains a text node">
      <x:context select="//h:a[@id='text_node']"/>
      <x:expect label="href attribute should be processed as expected">
	<a id="text_node" href="#chapter1">...</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="And the 'a' contains no text node (link)">
      <x:context select="//h:a[@id='no_text_node_link']"/>
      <x:expect label="href attribute should be processed as expected">
	<a data-type="link" id="no_text_node_link" href="#chapter1">...</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="And the 'a' contains a text node (link)">
      <x:context select="//h:a[@id='text_node_link']"/>
      <x:expect label="href attribute should be processed as expected">
	<a id="text_node_link" data-type="link" href="#chapter1">...</a>
      </x:expect>
    </x:scenario>
  </x:scenario>

  <x:scenario label="When an 'a' element is matched that contains an href pointing to an id (no initial #)">
    <x:context>
      <section id="chapter1" data-type="chapter">
	<p>Here comes a cross-reference: see <a id="no_text_node" href="chapter1"/></p>
	<p>Here comes an XREF with a text node: see <a id="text_node" href="chapter1">PLACEHOLDER TEXT</a></p>

	<p>Here comes a cross-reference: see <a id="no_text_node_link" data-type="link" href="chapter1"/></p>
	<p>Here comes an XREF with a text node: see <a id="text_node_link" data-type="link" href="chapter1">PLACEHOLDER TEXT</a></p>
      </section>
    </x:context>
    <x:scenario label="And the 'a' contains no text node" pending="We received an  error when trying to run this scenario.
We were using the Saxon JAR file version SAXON HE 9.5.1.2
and the script from https://github.com/xspec/xspec.">
      <x:context select="//h:a[@id='no_text_node']"/>
      <x:expect label="href attribute should be processed as expected">
	<a id="no_text_node" href="#chapter1" data-xref-pagenum-style="...">...</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="And the 'a' contains a text node">
      <x:context select="//h:a[@id='text_node']"/>
      <x:expect label="href attribute should be processed as expected">
	<a id="text_node" href="#chapter1">...</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="And the 'a' contains no text node (link)">
      <x:context select="//h:a[@id='no_text_node_link']"/>
      <x:expect label="href attribute should be processed as expected">
	<a data-type="link" id="no_text_node_link" href="#chapter1">...</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="And the 'a' contains a text node (link)">
      <x:context select="//h:a[@id='text_node_link']"/>
      <x:expect label="href attribute should be processed as expected">
	<a id="text_node_link" data-type="link" href="#chapter1">...</a>
      </x:expect>
    </x:scenario>
  </x:scenario>

  <x:scenario label="When an 'a' element is matched that contains an href pointing to a file/id">
    <x:context>
      <section id="chapter1" data-type="chapter">
	<p>Here comes a cross-reference: see <a id="no_text_node" href="ch01.html#chapter1"/></p>
	<p>Here comes an XREF with a text node: see <a id="text_node" href="ch01.html#chapter1">PLACEHOLDER TEXT</a></p>

	<p>Here comes a cross-reference: see <a id="no_text_node_link" data-type="link" href="ch01.html#chapter1"/></p>
	<p>Here comes an XREF with a text node: see <a id="text_node_link" data-type="link" href="ch01.html#chapter1">PLACEHOLDER TEXT</a></p>
      </section>
    </x:context>
    <x:scenario label="And the 'a' contains no text node" pending="We received an  error when trying to run this scenario.
We were using the Saxon JAR file version SAXON HE 9.5.1.2
and the script from https://github.com/xspec/xspec.">
      <x:context select="//h:a[@id='no_text_node']"/>
      <x:expect label="href attribute should be processed as expected">
	<a id="no_text_node" href="#chapter1" data-xref-pagenum-style="...">...</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="And the 'a' contains a text node">
      <x:context select="//h:a[@id='text_node']"/>
      <x:expect label="href attribute should be processed as expected">
	<a id="text_node" href="#chapter1">...</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="And the 'a' contains no text node (link)">
      <x:context select="//h:a[@id='no_text_node_link']"/>
      <x:expect label="href attribute should be processed as expected">
	<a data-type="link" id="no_text_node_link" href="#chapter1">...</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="And the 'a' contains a text node (link)">
      <x:context select="//h:a[@id='text_node_link']"/>
      <x:expect label="href attribute should be processed as expected">
	<a id="text_node_link" data-type="link" href="#chapter1">...</a>
      </x:expect>
    </x:scenario>
  </x:scenario>

  <x:scenario label="When an 'a' element is matched that contains an href pointing to a Web URL (not a valid XREF)">
    <x:context>
      <section id="chapter1" data-type="chapter">
	<p>Here comes a cross-reference: see <a id="no_text_node" href="http://oreilly.com/whatever.html#chapter1"/></p>
	<p>Here comes an XREF with a text node: see <a id="text_node" href="http://oreilly.com/whatever.html#chapter1">PLACEHOLDER TEXT</a></p>

	<p>Here comes a cross-reference: see <a id="no_text_node_link" data-type="link" href="http://oreilly.com/whatever.html#chapter1"/></p>
	<p>Here comes an XREF with a text node: see <a id="text_node_link" data-type="link" href="http://oreilly.com/whatever.html#chapter1">PLACEHOLDER TEXT</a></p>
      </section>
    </x:context>
    <x:scenario label="And the 'a' contains no text node">
      <x:context select="//h:a[@id='no_text_node']"/>
      <x:expect label="href attribute should be left untouched">
	<a id="no_text_node" href="http://oreilly.com/whatever.html#chapter1">...</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="And the 'a' contains a text node">
      <x:context select="//h:a[@id='text_node']"/>
      <x:expect label="href attribute should be left untouched">
	<a id="text_node" href="http://oreilly.com/whatever.html#chapter1">...</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="And the 'a' contains no text node (link)">
      <x:context select="//h:a[@id='no_text_node_link']"/>
      <x:expect label="href attribute should be left untouched">
	<a data-type="link" id="no_text_node_link" href="http://oreilly.com/whatever.html#chapter1">...</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="And the 'a' contains a text node (link)">
      <x:context select="//h:a[@id='text_node_link']"/>
      <x:expect label="href attribute should be left untouched">
	<a id="text_node_link" data-type="link" href="http://oreilly.com/whatever.html#chapter1">...</a>
      </x:expect>
    </x:scenario>
  </x:scenario>

  <x:scenario label="When an 'a' element is matched that contains an href pointing to a mailto URL (not a valid XREF)">
    <x:context>
      <section id="chapter1" data-type="chapter">
	<p>Here comes a cross-reference: see <a id="no_text_node" href="mailto:tools@oreilly.com"/></p>
	<p>Here comes an XREF with a text node: see <a id="text_node" href="mailto:tools@oreilly.com">PLACEHOLDER TEXT</a></p>

	<p>Here comes a cross-reference: see <a id="no_text_node_link" data-type="link" href="mailto:tools@oreilly.com"/></p>
	<p>Here comes an XREF with a text node: see <a id="text_node_link" data-type="link" href="mailto:tools@oreilly.com">PLACEHOLDER TEXT</a></p>
      </section>
    </x:context>
    <x:scenario label="And the 'a' contains no text node">
      <x:context select="//h:a[@id='no_text_node']"/>
      <x:expect label="href attribute should be left untouched">
	<a id="no_text_node" href="mailto:tools@oreilly.com">...</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="And the 'a' contains a text node">
      <x:context select="//h:a[@id='text_node']"/>
      <x:expect label="href attribute should be left untouched">
	<a id="text_node" href="mailto:tools@oreilly.com">...</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="And the 'a' contains no text node (link)">
      <x:context select="//h:a[@id='no_text_node_link']"/>
      <x:expect label="href attribute should be left untouched">
	<a data-type="link" id="no_text_node_link" href="mailto:tools@oreilly.com">...</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="And the 'a' contains a text node (link)">
      <x:context select="//h:a[@id='text_node_link']"/>
      <x:expect label="href attribute should be left untouched">
	<a data-type="link" id="text_node_link" href="mailto:tools@oreilly.com">...</a>
      </x:expect>
    </x:scenario>
  </x:scenario>

  <x:scenario label="When an 'a' element is matched that contains an href pointing to a bogus id">
    <x:context>
      <section id="chapter1" data-type="chapter">
	<p>Here comes a bogus cross-reference: see <a id="bogus_no_text_node" href="#bogus"/></p>
	<p>Here comes a bogus cross-reference with a text node: see <a id="bogus_text_node" href="#bogus">PLACEHOLDER TEXT</a></p>
	<p>Here comes a bogus cross-reference (random text): see <a id="random_bogus_no_text_node" href="random_bogus_text"/></p>
	<p>Here comes a bogus cross-reference (random text) with a text node: see <a id="random_bogus_text_node" href="random_bogus_text">PLACEHOLDER TEXT</a></p>
	<p>Here comes a bogus cross-reference (random text): see <a id="fileref_bogus_no_text_node" href="ch01.html#bogus"/></p>
	<p>Here comes a bogus cross-reference (random text) with a text node: see <a id="fileref_bogus_text_node" href="ch01.html#bogus">PLACEHOLDER TEXT</a></p>

	<p>Here comes a bogus cross-reference: see <a id="bogus_no_text_node_link" data-type="link" href="#bogus"/></p>
	<p>Here comes a bogus cross-reference with a text node: see <a id="bogus_text_node_link" data-type="link" href="#bogus">PLACEHOLDER TEXT</a></p>
	<p>Here comes a bogus cross-reference (random text): see <a id="random_bogus_no_text_node_link" data-type="link" href="random_bogus_text"/></p>
	<p>Here comes a bogus cross-reference (random text) with a text node: see <a id="random_bogus_text_node_link" data-type="link" href="random_bogus_text">PLACEHOLDER TEXT</a></p>
	<p>Here comes a bogus cross-reference (random text): see <a id="fileref_bogus_no_text_node_link" data-type="link" href="ch01.html#bogus"/></p>
	<p>Here comes a bogus cross-reference (random text) with a text node: see <a id="fileref_bogus_text_node_link" data-type="link" href="ch01.html#bogus">PLACEHOLDER TEXT</a></p>
      </section>
    </x:context>
    
    <x:scenario label="Where id doesn't exist (no text node)">
      <x:context select="//h:a[@id = 'bogus_no_text_node']"/>
      <x:expect label="href should resolve to # sign and content that follows">
	<a id="bogus_no_text_node" href="#bogus">...</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="Where id doesn't exist (text node)">
      <x:context select="//h:a[@id = 'bogus_text_node']"/>
      <x:expect label="href should resolve to # sign and content that follows">
	<a id="bogus_text_node" href="#bogus">...</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="Where id doesn't exist and no # sign (no text node)">
      <x:context select="//h:a[@id = 'random_bogus_no_text_node']"/>
      <x:expect label="href should resolve to # sign and existing href value">
	<a id="random_bogus_no_text_node" href="#random_bogus_text">...</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="Where id doesn't exist and no # sign (text node)">
      <x:context select="//h:a[@id = 'random_bogus_text_node']"/>
      <x:expect label="href should resolve to # sign and existing href value">
	<a id="random_bogus_text_node" href="#random_bogus_text">...</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="Where href is a bogus file/id pair (no text node)">
      <x:context select="//h:a[@id = 'fileref_bogus_no_text_node']"/>
      <x:expect label="href should resolve to # sign and content that follows">
	<a id="fileref_bogus_no_text_node" href="#bogus">...</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="Where href is a bogus file/id pair (text node)">
      <x:context select="//h:a[@id = 'fileref_bogus_text_node']"/>
      <x:expect label="href should resolve to # sign and content that follows">
	<a id="fileref_bogus_text_node" href="#bogus">...</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="Where id doesn't exist (link; no text node)">
      <x:context select="//h:a[@id = 'bogus_no_text_node_link']"/>
      <x:expect label="href should resolve to # sign and content that follows">
	<a id="bogus_no_text_node_link" data-type="link" href="#bogus">...</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="Where id doesn't exist (link; text node)">
      <x:context select="//h:a[@id = 'bogus_text_node_link']"/>
      <x:expect label="href should resolve to # sign and content that follows">
	<a id="bogus_text_node_link" data-type="link" href="#bogus">...</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="Where id doesn't exist and no # sign (link; no text node)">
      <x:context select="//h:a[@id = 'random_bogus_no_text_node_link']"/>
      <x:expect label="href should resolve to # sign and existing href value">
	<a id="random_bogus_no_text_node_link" data-type="link" href="#random_bogus_text">...</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="Where id doesn't exist and no # sign (link; text node)">
      <x:context select="//h:a[@id = 'random_bogus_text_node_link']"/>
      <x:expect label="href should resolve to # sign and existing href value">
	<a id="random_bogus_text_node_link" data-type="link" href="#random_bogus_text">...</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="Where href is a bogus file/id pair (link; no text node)">
      <x:context select="//h:a[@id = 'fileref_bogus_no_text_node_link']"/>
      <x:expect label="href should resolve to # sign and content that follows">
	<a id="fileref_bogus_no_text_node_link" data-type="link" href="#bogus">...</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="Where href is a bogus file/id pair (link; text node)">
      <x:context select="//h:a[@id = 'fileref_bogus_text_node_link']"/>
      <x:expect label="href should resolve to # sign and content that follows">
	<a id="fileref_bogus_text_node_link" data-type="link" href="#bogus">...</a>
      </x:expect>
    </x:scenario>

  </x:scenario>

  <!-- Handling for data-xref-pagenum-style attrs -->
  <!-- Tests based on global param values set in xref.pagenum.style.for.section.by.data-type above --> 
  <x:scenario label="When an XREF is matched">
    <x:context>
      <section data-type="preface" id="cool_preface">
	<h1>Preface Title</h1>
	<p>Cool preface</p>
	<section data-type="sect1" id="cool_sect1">
	  <h1>Sect1 Title</h1>
	  <p>Cool Sect1</p>
	</section>
      </section>
      <section data-type="chapter" id="cool_chapter">
	<h1>Chapter Title</h1>
	<p>Cool chapter</p>
	<figure id="cool_figure">
	  <img src="coolness.png"/>
	  <figcaption>Cool figure</figcaption>
	</figure>
	<p>Now here are the XREFs:</p>
	<p>XREF to preface: <a id="preface_xref" data-type="xref" href="#cool_preface"/></p>
	<p>XREF to chapter: <a id="chapter_xref" data-type="xref" href="#cool_chapter"/></p>
	<p>XREF to sect1: <a id="sect1_xref" data-type="xref" href="#cool_sect1"/></p>
	<p>XREF to figure (default pagenum-style): <a id="figure_xref" data-type="xref" href="#cool_figure"/></p>
	<p>XREF with custom pagenum-style: <a id="custom_pagenum_xref" data-type="xref" href="#cool_chapter" data-xref-pagenum-style="upper-roman"/></p>
	<p>"Stealth" XREF: <a id="stealth_xref" href="#cool_preface"/></p>
      </section>
    </x:context>

    <x:scenario label="With a preface target" pending="We received an  error when trying to run this scenario.
We were using the Saxon JAR file version SAXON HE 9.5.1.2
and the script from https://github.com/xspec/xspec.">
      <x:context select="(//h:a[@id='preface_xref'])[1]"/>
      <x:expect label="Correct data-xref-pagenum-style should be returned">
	<a id="preface_xref" href="..." data-type="xref" data-xref-pagenum-style="lower-roman">...</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="With a preface target (stealth XREF)" pending="We received an  error when trying to run this scenario.
We were using the Saxon JAR file version SAXON HE 9.5.1.2
and the script from https://github.com/xspec/xspec.">
      <x:context select="(//h:a[@id='stealth_xref'])[1]"/>
      <x:expect label="Correct data-xref-pagenum-style should be returned (default)">
	<a id="stealth_xref" href="..." data-xref-pagenum-style="lower-roman">...</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="With a chapter target" pending="We received an  error when trying to run this scenario.
We were using the Saxon JAR file version SAXON HE 9.5.1.2
and the script from https://github.com/xspec/xspec.">
      <x:context select="(//h:a[@id='chapter_xref'])[1]"/>
      <x:expect label="Correct data-xref-pagenum-style should be returned">
	<a id="chapter_xref" href="..." data-type="xref" data-xref-pagenum-style="decimal">...</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="With a sect1 target" pending="We received an  error when trying to run this scenario.
We were using the Saxon JAR file version SAXON HE 9.5.1.2
and the script from https://github.com/xspec/xspec.">
      <x:context select="(//h:a[@id='sect1_xref'])[1]"/>
      <x:expect label="Correct data-xref-pagenum-style should be returned">
	<a id="sect1_xref" href="..." data-type="xref" data-xref-pagenum-style="lower-roman">...</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="With a figure target" pending="We received an  error when trying to run this scenario.
We were using the Saxon JAR file version SAXON HE 9.5.1.2
and the script from https://github.com/xspec/xspec.">
      <x:context select="(//h:a[@id='figure_xref'])[1]"/>
      <x:expect label="Correct data-xref-pagenum-style should be returned">
	<a id="figure_xref" href="..." data-type="xref" data-xref-pagenum-style="decimal">...</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="With a custom data-xref-pagenum-style attr" pending="We received an  error when trying to run this scenario.
We were using the Saxon JAR file version SAXON HE 9.5.1.2
and the script from https://github.com/xspec/xspec.">
      <x:context select="(//h:a[@id='custom_pagenum_xref'])[1]"/>
      <x:expect label="Correct data-xref-pagenum-style should be returned (default)">
	<a id="custom_pagenum_xref" href="..." data-type="xref" data-xref-pagenum-style="upper-roman">...</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="With autogenerate.xref.pagenum.style turned off" pending="We received an  error when trying to run this scenario.
We were using the Saxon JAR file version SAXON HE 9.5.1.2
and the script from https://github.com/xspec/xspec.">
      <x:context select="(//h:a[@id='preface_xref'])[1]">
	<x:param name="autogenerate.xref.pagenum.style" select="0"/>
      </x:context>
      <x:expect label="No data-xref-pagenum-style should be added" test="not(exists($x:result[@data-xref-pagenum-style]))"/>
    </x:scenario>

    <x:scenario label="With autogenerate.xref.pagenum.style turned off (hardcoded data-xref-pagenum-style attr)" pending="We received an  error when trying to run this scenario.
We were using the Saxon JAR file version SAXON HE 9.5.1.2
and the script from https://github.com/xspec/xspec.">
      <x:context select="(//h:a[@id='custom_pagenum_xref'])[1]">
	<x:param name="autogenerate.xref.pagenum.style" select="0"/>
      </x:context>
      <x:expect label="Existing data-xref-pagenum-style should be preserved">
	<a id="custom_pagenum_xref" href="..." data-type="xref" data-xref-pagenum-style="upper-roman">...</a>
      </x:expect>
    </x:scenario>
  </x:scenario>
  
  <!-- Handling for print URLs (url.in.parens) -->
  <x:scenario label="If external hyperlink 'a' element is matched">
    <x:context>
      <section data-type="chapter">
        <h1>Hyperlink Spree!</h1>
        <p><a id="hyperlink_different_text_node" href="http://oreilly.com">O'Reilly Media</a></p>
        <p><a id="hyperlink_same_text_node" href="http://oreilly.com">http://oreilly.com</a></p>
        <p><a id="hyperlink_same_text_node_2" href="http://oreilly.com">oreilly.com</a></p>
        <p><a id="hyperlink_same_text_node_3" href="http://www.oreilly.com">oreilly.com</a></p>
	<p><a id="hyperlink_same_text_node_4" href="http://www.oreilly.com">www.oreilly.com</a></p>
        <p><a id="hyperlink_same_text_node_5" href="http://oreilly.com/">http://oreilly.com</a></p>
        <p><a id="hyperlink_same_text_node_6" href="http://oreilly.com/">oreilly.com</a></p>
        <p><a id="hyperlink_same_text_node_7" href="http://www.oreilly.com/">oreilly.com</a></p>
	<p><a id="hyperlink_same_text_node_8" href="http://www.oreilly.com/">www.oreilly.com</a></p>
        <p><a id="link" data-type="link" href="#some_id">some awesome location in the text</a></p>
	<p><a href="#another_id" id="stealth_xref">XREF masquerading as an external hyperlink (no proper data-type)</a></p>
        <p><a id="email_me" href="mailto:tools@oreilly.com">tools@oreilly.com</a></p>
      </section>
    </x:context>

    <x:scenario label="(not XREF mode)" pending="We received an  error when trying to run this scenario.
We were using the Saxon JAR file version SAXON HE 9.5.1.2
and the script from https://github.com/xspec/xspec.">
      <x:expect label="No data-xref-pagenum-style attribute should be added" test="not(exists(//h:a[@data-xref-pagenum-style]))"/>
    </x:scenario>

    <x:scenario label="with url.in.parens disabled (hyperlink different text node from href)">
      <x:context select="//h:a[@id='hyperlink_different_text_node']">
        <x:param name="url.in.parens" select="0"/>
      </x:context>
      
      <x:expect label="No URL should be generated in parentheses after the 'a'" test="not(exists(//h:span[@class='print_url_in_parens']))"/>
    </x:scenario> 
    
    <x:scenario label="with url.in.parens disabled (hyperlink same text node as href 1)">
      <x:context select="//h:a[@id='hyperlink_same_text_node']">
        <x:param name="url.in.parens" select="0"/>
      </x:context>
      
      <x:expect label="No URL should be generated in parentheses after the 'a'" test="not(exists(//h:span[@class='print_url_in_parens']))"/>
    </x:scenario>    
    
    <x:scenario label="with url.in.parens disabled (hyperlink same text node as href 2)">
      <x:context select="//h:a[@id='hyperlink_same_text_node_2']">
        <x:param name="url.in.parens" select="0"/>
      </x:context>
      
      <x:expect label="No URL should be generated in parentheses after the 'a'" test="not(exists(//h:span[@class='print_url_in_parens']))"/>
    </x:scenario>  
    
    <x:scenario label="with url.in.parens disabled (hyperlink same text node as href 3)">
      <x:context select="//h:a[@id='hyperlink_same_text_node_3']">
        <x:param name="url.in.parens" select="0"/>
      </x:context>
      
      <x:expect label="No URL should be generated in parentheses after the 'a'" test="not(exists(//h:span[@class='print_url_in_parens']))"/>
    </x:scenario> 

    <x:scenario label="with url.in.parens disabled (hyperlink same text node as href 4)">
      <x:context select="//h:a[@id='hyperlink_same_text_node_4']">
        <x:param name="url.in.parens" select="0"/>
      </x:context>
      
      <x:expect label="No URL should be generated in parentheses after the 'a'" test="not(exists(//h:span[@class='print_url_in_parens']))"/>
    </x:scenario>

    <x:scenario label="with url.in.parens disabled (hyperlink same text node as href 5)">
      <x:context select="//h:a[@id='hyperlink_same_text_node_5']">
        <x:param name="url.in.parens" select="0"/>
      </x:context>
      
      <x:expect label="No URL should be generated in parentheses after the 'a'" test="not(exists(//h:span[@class='print_url_in_parens']))"/>
    </x:scenario>

    <x:scenario label="with url.in.parens disabled (hyperlink same text node as href 6)">
      <x:context select="//h:a[@id='hyperlink_same_text_node_6']">
        <x:param name="url.in.parens" select="0"/>
      </x:context>
      
      <x:expect label="No URL should be generated in parentheses after the 'a'" test="not(exists(//h:span[@class='print_url_in_parens']))"/>
    </x:scenario>

    <x:scenario label="with url.in.parens disabled (hyperlink same text node as href 7)">
      <x:context select="//h:a[@id='hyperlink_same_text_node_7']">
        <x:param name="url.in.parens" select="0"/>
      </x:context>
      
      <x:expect label="No URL should be generated in parentheses after the 'a'" test="not(exists(//h:span[@class='print_url_in_parens']))"/>
    </x:scenario>

    <x:scenario label="with url.in.parens disabled (hyperlink same text node as href 8)">
      <x:context select="//h:a[@id='hyperlink_same_text_node_8']">
        <x:param name="url.in.parens" select="0"/>
      </x:context>
      
      <x:expect label="No URL should be generated in parentheses after the 'a'" test="not(exists(//h:span[@class='print_url_in_parens']))"/>
    </x:scenario>
    
    <x:scenario label="with url.in.parens disabled (internal link)">
      <x:context select="//h:a[@id='link']">
        <x:param name="url.in.parens" select="0"/>
      </x:context>
      
      <x:expect label="No URL should be generated in parentheses after the 'a'" test="not(exists(//h:span[@class='print_url_in_parens']))"/>
    </x:scenario> 

    <x:scenario label="with url.in.parens disabled (stealth XREF; XREF with no data-type)">
      <x:context select="//h:a[@id='stealth_xref']">
        <x:param name="url.in.parens" select="0"/>
      </x:context>
      
      <x:expect label="No URL should be generated in parentheses after the 'a'" test="not(exists(//h:span[@class='print_url_in_parens']))"/>
    </x:scenario> 
    
    <x:scenario label="with url.in.parens disabled (mailto)">
      <x:context select="//h:a[@id='email_me']">
        <x:param name="url.in.parens" select="0"/>
      </x:context>
      
      <x:expect label="No URL should be generated in parentheses after the 'a'" test="not(exists(//h:span[@class='print_url_in_parens']))"/>
    </x:scenario>
    
    <x:scenario label="with url.in.parens enabled (hyperlink different text node from href)">
      <x:context select="//h:a[@id='hyperlink_different_text_node']">
        <x:param name="url.in.parens" select="1"/>
      </x:context>
      
      <x:expect label="URL should be generated in parentheses after the 'a'">
        <a id="hyperlink_different_text_node" href="http://oreilly.com">O'Reilly Media</a><span class="print_url_in_parens"> (<span class="print_url">http://oreilly.com</span>)</span>
      </x:expect>
    </x:scenario> 
    
    <x:scenario label="with url.in.parens enabled (hyperlink same text node as href 1)">
      <x:context select="//h:a[@id='hyperlink_same_text_node']">
        <x:param name="url.in.parens" select="1"/>
      </x:context>
      
      <x:expect label="No URL should be generated in parentheses after the 'a'" test="not(exists(//h:span[@class='print_url_in_parens']))"/>
    </x:scenario>    
    
    <x:scenario label="with url.in.parens enabled (hyperlink same text node as href 2)">
      <x:context select="//h:a[@id='hyperlink_same_text_node_2']">
        <x:param name="url.in.parens" select="1"/>
      </x:context>
      
      <x:expect label="No URL should be generated in parentheses after the 'a'" test="not(exists(//h:span[@class='print_url_in_parens']))"/>
    </x:scenario>  
    
    <x:scenario label="with url.in.parens enabled (hyperlink same text node as href 3)">
      <x:context select="//h:a[@id='hyperlink_same_text_node_3']">
        <x:param name="url.in.parens" select="1"/>
      </x:context>
      
      <x:expect label="No URL should be generated in parentheses after the 'a'" test="not(exists(//h:span[@class='print_url_in_parens']))"/>
    </x:scenario>

    <x:scenario label="with url.in.parens enabled (hyperlink same text node as href 4)">
      <x:context select="//h:a[@id='hyperlink_same_text_node_4']">
        <x:param name="url.in.parens" select="1"/>
      </x:context>
      
      <x:expect label="No URL should be generated in parentheses after the 'a'" test="not(exists(//h:span[@class='print_url_in_parens']))"/>
    </x:scenario> 

    <x:scenario label="with url.in.parens enabled (hyperlink same text node as href 5)">
      <x:context select="//h:a[@id='hyperlink_same_text_node_5']">
        <x:param name="url.in.parens" select="1"/>
      </x:context>
      
      <x:expect label="No URL should be generated in parentheses after the 'a'" test="not(exists(//h:span[@class='print_url_in_parens']))"/>
    </x:scenario> 

    <x:scenario label="with url.in.parens enabled (hyperlink same text node as href 6)">
      <x:context select="//h:a[@id='hyperlink_same_text_node_6']">
        <x:param name="url.in.parens" select="1"/>
      </x:context>
      
      <x:expect label="No URL should be generated in parentheses after the 'a'" test="not(exists(//h:span[@class='print_url_in_parens']))"/>
    </x:scenario> 

    <x:scenario label="with url.in.parens enabled (hyperlink same text node as href 7)">
      <x:context select="//h:a[@id='hyperlink_same_text_node_7']">
        <x:param name="url.in.parens" select="1"/>
      </x:context>
      
      <x:expect label="No URL should be generated in parentheses after the 'a'" test="not(exists(//h:span[@class='print_url_in_parens']))"/>
    </x:scenario> 

    <x:scenario label="with url.in.parens enabled (hyperlink same text node as href 8)">
      <x:context select="//h:a[@id='hyperlink_same_text_node_8']">
        <x:param name="url.in.parens" select="1"/>
      </x:context>
      
      <x:expect label="No URL should be generated in parentheses after the 'a'" test="not(exists(//h:span[@class='print_url_in_parens']))"/>
    </x:scenario> 
    
    <x:scenario label="with url.in.parens enabled (internal link)">
      <x:context select="//h:a[@id='link']">
        <x:param name="url.in.parens" select="1"/>
      </x:context>
      
      <x:expect label="No URL should be generated in parentheses after the 'a'" test="not(exists(//h:span[@class='print_url_in_parens']))"/>
    </x:scenario> 

    <x:scenario label="with url.in.parens enabled (stealth XREF; XREF with no data-type)">
      <x:context select="//h:a[@id='stealth_xref']">
        <x:param name="url.in.parens" select="1"/>
      </x:context>
      
      <x:expect label="No URL should be generated in parentheses after the 'a'" test="not(exists(//h:span[@class='print_url_in_parens']))"/>
    </x:scenario> 
    
    <x:scenario label="with url.in.parens enabled (mailto)">
      <x:context select="//h:a[@id='email_me']">
        <x:param name="url.in.parens" select="1"/>
      </x:context>
      
      <x:expect label="No URL should be generated in parentheses after the 'a'" test="not(exists(//h:span[@class='print_url_in_parens']))"/>
    </x:scenario>

  </x:scenario>

  <x:scenario label="If callout-type 'stealth XREF' 'a' elements are matched">
    <x:context select="(//h:a[@class='co'])[1]">
      <pre data-type="programlisting" data-code-language="json"><?db-font-size 65%?>{
        "context_is_admin":  [["role:admin"]],
        "admin_or_owner":  [["is_admin:True"], ["project_id:%(project_id)s"]], <a class="co" id="co_ch9-co-1" href="#callout_ch9-co-1"><img src="/usr/local/app/git_tmp/c3c6787bcdd5a68b82f8e9e0a5dd141c/doc/openstack-ops/callouts/1.png" alt="1"/></a>
        ...
      </pre>
    </x:context>

    <x:expect label="No data-xref-pagenum-style attribute should be added" test="not(exists(//h:a[@data-xref-pagenum-style]))"/>

    <x:scenario label="with url.in.parens disabled (callout stealth XREF; XREF with no data-type)">
      <x:context>
        <x:param name="url.in.parens" select="0"/>
      </x:context>

      <x:expect label="No URL should be generated in parentheses after the 'a'" test="not(exists(//h:span[@class='print_url_in_parens']))"/>
    </x:scenario>

    <x:scenario label="with url.in.parens enabled (callout stealth XREF; XREF with no data-type)">
      <x:context>
        <x:param name="url.in.parens" select="1"/>
      </x:context>

      <x:expect label="No URL should be generated in parentheses after the 'a'" test="not(exists(//h:span[@class='print_url_in_parens']))"/>
    </x:scenario>
  </x:scenario>

  <!-- Tests around "pagenum" classes for XREFs -->
  <x:scenario label="If XREF is matched">
    <x:context>
      <body>
	<section data-type="chapter" id="first">
	  <h1>First chapter</h1>
	  <p>Some text</p>
	  <p>XREF to second chapter is here: see <a id="chapter_xref" data-type="xref" href="#second"/></p>
	  <p>Now here's a sidebar:</p>
	  <aside data-type="sidebar" id="sidebar">
	    <h5>Sidebar heading</h5>
	    <p>Sidebar text</p>
	  </aside>
	  <p>XREF to the sect1 in second chapter: see <a id="sect1_xref" data-type="xref" href="#chapter2_sect1"/></p>
	</section>
	<section data-type="chapter" id="second">
	  <h1>Second chapter</h1>
	  <p>Let's add a sect1</p>
	  <section data-type="sect1" id="chapter2_sect1">
	    <h1>Subsection heading</h1>
	    <p>Always soft-code your cross-references</p>
	    <p>Like this one to the sidebar in the previous chapter: see <a class="underline" id="sidebar_xref" data-type="xref" href="#sidebar"/></p>
	  </section>
	</section>
      </body>
    </x:context>

    <x:scenario label="that points to an element in the xref.elements.pagenum.in.class list" pending="We received an  error when trying to run this scenario.
We were using the Saxon JAR file version SAXON HE 9.5.1.2
and the script from https://github.com/xspec/xspec.">
      <x:context select="//h:a[@data-type='xref'][@id='chapter_xref']">
	<x:param name="xref.elements.pagenum.in.class">chapter
sidebar
	</x:param>
      </x:context>
      <x:expect label="Class value of 'pagenum' should be added to element" test="exists(//h:a[@class = 'pagenum'])"/>
    </x:scenario>

    <x:scenario label="that points to an element in the xref.elements.pagenum.in.class list (XREF already has class value)" pending="We received an  error when trying to run this scenario.
We were using the Saxon JAR file version SAXON HE 9.5.1.2
and the script from https://github.com/xspec/xspec.">
      <x:context select="//h:a[@data-type='xref'][@id='sidebar_xref']">
	<x:param name="xref.elements.pagenum.in.class">chapter
sidebar
	</x:param>
      </x:context>
      <x:expect label="Class value of 'pagenum' should be added to element (preserving existing class values)" test="exists(//h:a[@class = 'underline pagenum'])"/>
    </x:scenario>

    <x:scenario label="that points to an element *not in* the xref.elements.pagenum.in.class list" pending="We received an  error when trying to run this scenario.
We were using the Saxon JAR file version SAXON HE 9.5.1.2
and the script from https://github.com/xspec/xspec.">
      <x:context select="//h:a[@data-type='xref'][@id='sect1_xref']">
	<x:param name="xref.elements.pagenum.in.class">chapter
sidebar
	</x:param>
      </x:context>
      <x:expect label="Class value of 'pagenum' should not be added to element" test="not(exists(//h:a[@class = 'pagenum']))"/>
    </x:scenario>

    <x:scenario label="with xref.elements.pagenum.in.class empty and no preexisting class on XREF" pending="We received an  error when trying to run this scenario.
We were using the Saxon JAR file version SAXON HE 9.5.1.2
and the script from https://github.com/xspec/xspec.">
      <x:context select="//h:a[@data-type='xref'][@id='chapter_xref']">
	<x:param name="xref.elements.pagenum.in.class"/>
      </x:context>
      <x:expect label="No class attribute should be added to element" test="not(exists(//h:a[@class]))"/>
    </x:scenario>

    <x:scenario label="with xref.elements.pagenum.in.class empty and a preexisting class on XREF" pending="We received an  error when trying to run this scenario.
We were using the Saxon JAR file version SAXON HE 9.5.1.2
and the script from https://github.com/xspec/xspec.">
      <x:context select="//h:a[@data-type='xref'][@id='sidebar_xref']">
	<x:param name="xref.elements.pagenum.in.class"/>
      </x:context>
      <x:expect label="Class attribute should be preserved as is" test="exists(//h:a[@class='underline'])"/>
    </x:scenario>

  </x:scenario>

  <!-- Tests for data-xref-pagenum-style -->
  <!-- Use global param xref.pagenum.style.for.section.by.data-type set above -->
  <x:scenario label="XREF to a chapter">
    <x:context mode="xref-pagenum-style">
      <section data-type="chapter"/>
    </x:context>
    <x:expect label="should return the correct xref-pagenum-style">decimal</x:expect>
  </x:scenario>

  <x:scenario label="XREF to a preface">
    <x:context mode="xref-pagenum-style">
      <section data-type="preface"/>
    </x:context>
    <x:expect label="should return the correct xref-pagenum-style">lower-roman</x:expect>
  </x:scenario>

  <x:scenario label="When a specific pagenum style is passed to xref-pagenum-style">
    <x:context mode="xref-pagenum-style">
      <section data-type="chapter"/>
      <x:param name="xref.pagenum.style">upper-roman</x:param>
    </x:context>
    <x:expect label="correct pagenum style should be returned">upper-roman</x:expect>
  </x:scenario>

  <x:scenario label="XREF to an element without predefined xref-pagenum-style">
    <x:context mode="xref-pagenum-style">
      <span/>
    </x:context>
    <x:expect label="should return the default xref-pagenum-style of decimal">decimal</x:expect>
  </x:scenario>

  <!-- Tests for data-xrefstyle attribute -->
  <x:scenario label="When an XREF is matched with data-xrefstyle...">
    <x:context>
      <body>
        <div data-type="part" id="awesome_part">
        <h1>I'm Part of the Solution!</h1>
          <section data-type="appendix" id="awesome_app">
            <h1>Appendix Title</h1>
            <p>Some text</p>
          </section>
        </div>
	<section data-type="chapter" id="awesome_chap">
	  <h1>AWESOME CHAPTER</h1>
	  <p>Check out this pic:</p>
	  <figure>
	    <figcaption>AWESOME PIC</figcaption>
	    <img alt="awesomeness" src="awesomeness.png"/>
	  </figure>
	  <p>And this one, too:</p>
	  <figure id="awesome_squared_fig">
	    <figcaption>AWESOMENESS SQUARED</figcaption>
	    <img alt="awesomeness to the second power" src="awesomenesssquared.png"/>
	  </figure>
	  <p>See <a href="#awesome_squared_fig" id="labelnumber-xref" data-type="xref" data-xrefstyle="select: labelnumber"/> for lots of awesomeness.</p>
	  <p>See <a href="#awesome_chap" id="chap-num-title-xref" data-type="xref" data-xrefstyle="chap-num-title"/> for awesomeness.</p>
	  <p>See <a href="#awesome_app" id="app-num-title-xref" data-type="xref" data-xrefstyle="app-num-title"/> for app awesomeness.</p>
	  <p>See <a href="#awesome_part" id="part-num-title-xref" data-type="xref" data-xrefstyle="part-num-title"/> for part awesomeness.</p>
	  <p>See <a href="#awesome_sect1" id="nopage-xref" data-type="xref" data-xrefstyle="select:nopage"/> for yet more awesomeness</p>
	  <section id="awesome_sect1" data-type="sect1">
	    <h1>AWESOME SUBSECTION</h1>
	    <p>I'm here only as an XREF referent.</p>
	  </section>
	</section>
      </body>
    </x:context>

    <x:scenario label="of 'select: labelnumber'">
      <x:context select="//h:a[@id='labelnumber-xref']"/>
      <x:expect label="it should return just the label number"><a href="#awesome_squared_fig" id="labelnumber-xref" data-type="xref" data-xrefstyle="select: labelnumber" data-xref-pagenum-style="...">1-2</a></x:expect>
    </x:scenario>

    <x:scenario label="of 'chap-num-title'" pending="We received an  error when trying to run this scenario.
We were using the Saxon JAR file version SAXON HE 9.5.1.2
and the script from https://github.com/xspec/xspec.">
      <x:context select="//h:a[@id='chap-num-title-xref']"/>
      <x:expect label="it should return chapter label, number, and title"><a href="#awesome_chap" id="chap-num-title-xref" data-type="xref" data-xrefstyle="chap-num-title" data-xref-pagenum-style="...">Chapter&#xa0;1, “AWESOME CHAPTER“</a></x:expect>
    </x:scenario>

    <x:scenario label="of 'app-num-title'" pending="We received an  error when trying to run this scenario.
We were using the Saxon JAR file version SAXON HE 9.5.1.2
and the script from https://github.com/xspec/xspec.">
      <x:context select="//h:a[@id='app-num-title-xref']"/>
      <x:expect label="it should return appendix label, number, and title"><a href="#awesome_app" id="app-num-title-xref" data-type="xref" data-xrefstyle="app-num-title" data-xref-pagenum-style="...">Appendix&#xa0;A, “Appendix Title“</a></x:expect>
    </x:scenario>

    <x:scenario label="of 'part-num-title'" pending="We received an  error when trying to run this scenario.
We were using the Saxon JAR file version SAXON HE 9.5.1.2
and the script from https://github.com/xspec/xspec.">
      <x:context select="//h:a[@id='part-num-title-xref']"/>
      <x:expect label="it should return part label, number, and title"><a href="#awesome_part" id="part-num-title-xref" data-type="xref" data-xrefstyle="part-num-title" data-xref-pagenum-style="...">Part&#xa0;I, “I'm Part of the Solution!“</a></x:expect>
    </x:scenario>

    <x:scenario label="of 'select:nopage'" pending="We received an  error when trying to run this scenario.
We were using the Saxon JAR file version SAXON HE 9.5.1.2
and the script from https://github.com/xspec/xspec.">
      <x:context select="//h:a[@id='nopage-xref']">
	<x:param name="xref.elements.pagenum.in.class">sect1</x:param>
      </x:context>
      <x:expect label="it should return an XREF as usual, but without a pagenum class"><a href="#awesome_sect1" id="nopage-xref" data-xref-pagenum-style="..." data-xrefstyle="select:nopage" data-type="xref">&#x201c;AWESOME SUBSECTION&#x201d;</a></x:expect>
    </x:scenario>

    <x:scenario label="of 'chap-num-title' (localization other than 'en')"
		pending="No clean way to parameterize language at template level for unit tests yet">
      <x:expect label="FILL ME IN LATER" select="'FILL ME IN LATER'"/>
    </x:scenario>
    
  </x:scenario>

  <!-- Tests for whether an HREF is considered to be an XREF (link within the same corpus) -->
  <x:scenario label="If an href starts with a '#'">
    <x:call template="href-is-xref">
      <x:param name="href-value" select="'#whatever'"/>
    </x:call>
    <x:expect label="It is considered to be an XREF">1</x:expect>
  </x:scenario>

  <x:scenario label="If an href contains a '://' scheme (http://)">
    <x:call template="href-is-xref">
      <x:param name="href-value" select="'http://oreilly.com'"/>
    </x:call>
    <x:expect label="It *is not* considered to be an XREF">0</x:expect>
  </x:scenario>

  <x:scenario label="If an href contains a '://' scheme (https://)">
    <x:call template="href-is-xref">
      <x:param name="href-value" select="'https://github.com'"/>
    </x:call>
    <x:expect label="It *is not* considered to be an XREF">0</x:expect>
  </x:scenario>

  <x:scenario label="If an href contains a '://' scheme (ftp://)">
    <x:call template="href-is-xref">
      <x:param name="href-value" select="'ftp://ftp.ora.com'"/>
    </x:call>
    <x:expect label="It *is not* considered to be an XREF">0</x:expect>
  </x:scenario>

  <x:scenario label="If an href contains a mailto: link">
    <x:call template="href-is-xref">
      <x:param name="href-value" select="'mailto:atlas@oreilly.com'"/>
    </x:call>
    <x:expect label="It *is not* considered to be an XREF">0</x:expect>
  </x:scenario>

  <x:scenario label="If an href contains a local fileref+id ref">
    <x:call template="href-is-xref">
      <x:param name="href-value" select="'ch01.html#cookies'"/>
    </x:call>
    <x:expect label="It is considered to be an XREF">1</x:expect>
  </x:scenario>

  <x:scenario label="If an href contains a local fileref (no id ref)">
    <x:call template="href-is-xref">
      <x:param name="href-value" select="'ch01.html'"/>
    </x:call>
    <x:expect label="It is considered to be an XREF">1</x:expect>
  </x:scenario>

  <x:scenario label="If an href contains any-old text but no URL scheme">
    <x:call template="href-is-xref">
      <x:param name="href-value" select="'i_guess_this_is_an_xref'"/>
    </x:call>
    <x:expect label="It is considered to be an XREF">1</x:expect>
  </x:scenario>

  <!-- Tests for calculate-output-href for handling of href attributes on <a> elements -->
  <x:scenario label="If an href is in the format #id">
    <x:call template="calculate-output-href">
      <x:param name="source-href-value" select="'#whatever'"/>
    </x:call>
    <x:expect label="It should be output as is">#whatever</x:expect>
  </x:scenario>

  <x:scenario label="If an href is in the format filename.html#id">
    <x:call template="calculate-output-href">
      <x:param name="source-href-value" select="'ch01.html#whatever'"/>
    </x:call>
    <x:expect label="Output just the id">#whatever</x:expect>
  </x:scenario>

  <x:scenario label="If an href contains a '://' scheme (http://)">
    <x:call template="calculate-output-href">
      <x:param name="source-href-value" select="'http://oreilly.com/whatever.html#whatever'"/>
    </x:call>
    <x:expect label="It should be output as is">http://oreilly.com/whatever.html#whatever</x:expect>
  </x:scenario>

  <x:scenario label="If an href contains a mailto: scheme">
    <x:call template="calculate-output-href">
      <x:param name="source-href-value" select="'mailto:whatever@oreilly.com'"/>
    </x:call>
    <x:expect label="It should be output as is">mailto:whatever@oreilly.com</x:expect>
  </x:scenario>

  <x:scenario label="If href text does not contain absolute URL or # sign">
    <x:call template="calculate-output-href">
      <x:param name="source-href-value" select="'random_text'"/>
    </x:call>
    <x:expect label="It should be output as is, prepended by a # sign">#random_text</x:expect>
  </x:scenario>

  <x:scenario label="If href text does not contain absolute URL and contains multiple # signs">
    <x:call template="calculate-output-href">
      <x:param name="source-href-value" select="'why_would_you#do_this#idonotknow'"/>
    </x:call>
    <x:expect label="Output the content from the *last* # sign to the end">#idonotknow</x:expect>
  </x:scenario>

  <!-- Tests for calculate-xrefstyle template -->
  <x:scenario label="If calculate-xrefstyle is called on xrefstyle of 'select: labelnumber'">
    <x:call template="calculate-xrefstyle">
      <x:param name="data-xrefstyle-attr">select: labelnumber</x:param>
    </x:call>
    <x:expect label="Proper template should be generated">template:%n</x:expect>
  </x:scenario>

  <x:scenario label="If calculate-xrefstyle is called on xrefstyle of 'select:labelnumber'">
    <x:call template="calculate-xrefstyle">
      <x:param name="data-xrefstyle-attr">select: labelnumber</x:param>
    </x:call>
    <x:expect label="Proper template should be generated">template:%n</x:expect>
  </x:scenario>

  <x:scenario label="If calculate-xrefstyle is called on xrefstyle of chap-num-title">
    <x:call template="calculate-xrefstyle">
      <x:param name="data-xrefstyle-attr">chap-num-title</x:param>
    </x:call>
    <x:expect label="Proper template should be generated">xref-number-and-title</x:expect>
  </x:scenario>

  <x:scenario label="If calculate-xrefstyle is called on xrefstyle of app-num-title">
    <x:call template="calculate-xrefstyle">
      <x:param name="data-xrefstyle-attr">app-num-title</x:param>
    </x:call>
    <x:expect label="Proper template should be generated">xref-number-and-title</x:expect>
  </x:scenario>

  <x:scenario label="If calculate-xrefstyle is called on xrefstyle of part-num-title">
    <x:call template="calculate-xrefstyle">
      <x:param name="data-xrefstyle-attr">part-num-title</x:param>
    </x:call>
    <x:expect label="Proper template should be generated">xref-number-and-title</x:expect>
  </x:scenario>
  <x:scenario label="If calculate-xrefstyle is called on xrefstyle that does not match an enumerated pattern">
    <x:call template="calculate-xrefstyle">
      <x:param name="data-xrefstyle-attr">bogus_xrefstyle_yo</x:param>
    </x:call>
    <x:expect label="Result should be empty" select="()"/>
  </x:scenario>

  <x:scenario label="If calculate-xrefstyle is called on xrefstyle value that is empty">
    <x:call template="calculate-xrefstyle">
      <x:param name="data-xrefstyle-attr" select="''"/>
    </x:call>
    <x:expect label="Result should be empty" select="()"/>
  </x:scenario>
  
  <!-- Tests for trim url template -->
  <x:scenario label="If trim-url is called on URL text starting with http://">
    <x:call template="trim-url">
      <x:param name="url-to-trim">http://oreilly.com</x:param>
    </x:call>
    <x:expect label="Trimmed URL should be returned without http://">oreilly.com</x:expect>
  </x:scenario>

  <x:scenario label="If trim-url is called on URL text starting with www.">
    <x:call template="trim-url">
      <x:param name="url-to-trim">www.oreilly.com</x:param>
    </x:call>
    <x:expect label="Trimmed URL should be returned without http://">oreilly.com</x:expect>
  </x:scenario>
  
  <x:scenario label="If trim-url is called on URL text starting with http://www.">
    <x:call template="trim-url">
      <x:param name="url-to-trim">http://www.oreilly.com</x:param>
    </x:call>
    <x:expect label="Trimmed URL should be returned without http://www.">oreilly.com</x:expect>
  </x:scenario>

  <x:scenario label="If trim-url is called on URL text that ends in a forward slash">
    <x:call template="trim-url">
      <x:param name="url-to-trim">oreilly.com/</x:param>
    </x:call>
    <x:expect label="Trimmed URL should be returned without ending forward slash">oreilly.com</x:expect>
  </x:scenario>

  <x:scenario label="If trim-url is called on URL text starting with http:// and ending with a forward slash">
    <x:call template="trim-url">
      <x:param name="url-to-trim">http://oreilly.com/</x:param>
    </x:call>
    <x:expect label="Trimmed URL should be returned without http:// and trailing forward slash">oreilly.com</x:expect>
  </x:scenario>

  <x:scenario label="If trim-url is called on URL text starting with www. and ending with a forward slash">
    <x:call template="trim-url">
      <x:param name="url-to-trim">www.oreilly.com/</x:param>
    </x:call>
    <x:expect label="Trimmed URL should be returned without http:// and trailing forward slash">oreilly.com</x:expect>
  </x:scenario>
  
  <x:scenario label="If trim-url is called on URL text starting with http://www. and ending with a forward slash">
    <x:call template="trim-url">
      <x:param name="url-to-trim">http://www.oreilly.com/</x:param>
    </x:call>
    <x:expect label="Trimmed URL should be returned without http://www. and trailing forward slash">oreilly.com</x:expect>
  </x:scenario>
  
  <x:scenario label="If trim-url is called on URL text that does not start with http:// or www, or end with a forward slash.">
    <x:call template="trim-url">
      <x:param name="url-to-trim">oreilly.com</x:param>
    </x:call>
    <x:expect label="Trimmed URL should be returned as is">oreilly.com</x:expect>
  </x:scenario>

<!-- XREFS for Admonitions begins -->
  <x:scenario label="When an XREF points to an admonition with a title">
    <x:context>
        <section data-type="chapter">
        <div data-type="note" id="note_admonition">
          <h1>I am a note title!</h1>
          <p>This is a note</p>
        </div>
          <div data-type="tip" id="tip_admonition">
          <h1>I am a tip title!</h1>
          <p>This is a tip</p>
        </div>
        <div data-type="warning" id="warning_admonition">
          <h1>I am a warning title!</h1>
          <p>This is a warning</p>
        </div>
  </section>
</x:context>

  <x:scenario label="When an XREF points to a note with a title">
  <x:context mode="xref-to" select="(//h:div[@data-type='note'])[1]"/>
    <x:expect label="Gentext should be created for the xref">“I am a note title!”</x:expect>
  </x:scenario>
    <x:scenario label="When an XREF points to a tip with a title">
  <x:context mode="xref-to" select="(//h:div[@data-type='tip'])[1]"/>
    <x:expect label="Gentext should be created for the xref">“I am a tip title!”</x:expect>
  </x:scenario>

  <x:scenario label="When an XREF points to a warning with a title">
  <x:context mode="xref-to" select="(//h:div[@data-type='warning'])[1]"/>
    <x:expect label="Gentext should not be created for the xref">“I am a warning title!”</x:expect>
  </x:scenario>
 </x:scenario>

<x:scenario label="When an XREF points to an admonition without a title">
  <x:context>
    <section data-type="chapter">
        <div data-type="note" id="note_admonition">
          <p>This is a note</p>
        </div>
        <div data-type="tip" id="tip_admonition">
          <p>This is a tip</p>
        </div>
        <div data-type="warning" id="warning_admonition">
          <p>This is a warning</p>
        </div>
  </section>
  </x:context>

    <x:scenario label="When an XREF points to a note without a title">
  <x:context mode="xref-to" select="(//h:div[@data-type='note'])[1]"/>
    <x:expect label="Gentext should not be created for the xref">???</x:expect>
  </x:scenario>

  <x:scenario label="When an XREF points to a tip without a title">
  <x:context mode="xref-to" select="(//h:div[@data-type='tip'])[1]"/>
    <x:expect label="Gentext should be created for the xref">???</x:expect>
  </x:scenario>

  <x:scenario label="When an XREF points to a warning without a title">
  <x:context mode="xref-to" select="(//h:div[@data-type='warning'])[1]"/>
    <x:expect label="Gentext should not be created for the xref">???</x:expect>
  </x:scenario>
</x:scenario>

  <x:scenario label="When an XREF points to any admonition">
  <x:context>
  <x:param name="xref.elements.pagenum.in.class">
    note
    tip
    warning
  </x:param>
  <section data-type="chapter">
    <p>XREF to Note: <a data-type="xref" href="#note1"/></p>

    <p>XREF to Tip: <a data-type="xref" href="#tip1"/></p>

    <p>XREF to Warning: <a data-type="xref" href="#warning1"/></p>

        <div data-type="note" id="note1">
          <h1>I am a title!</h1>
          <p>This is a note</p>
        </div>

        <div data-type="tip" id="tip1">
          <h1>I am a title!</h1>
          <p>This is a tip</p>
        </div>

        <div data-type="warning" id="warning1">
          <h1>I am a title!</h1>
          <p>This is a warning</p>
        </div>
  </section>
  </x:context>
   <x:scenario label="When an XREF points to any Note">
    <x:context select="(//h:a[@data-type='xref'])[1]"/>
    <x:expect label="The xref should generate with a pagenum class"><a href="..." data-type="xref" data-xref-pagenum-style="..." class="pagenum">...</a></x:expect>
   </x:scenario>
   <x:scenario label="When an XREF points to any Tip">
    <x:context select="(//h:a[@data-type='xref'])[2]"/>
    <x:expect label="The xref should generate with a pagenum class"><a href="..." data-type="xref" data-xref-pagenum-style="..." class="pagenum">...</a></x:expect>
   </x:scenario>
   <x:scenario label="When an XREF points to any Warning">
    <x:context select="(//h:a[@data-type='xref'])[3]"/>
    <x:expect label="The xref should generate with a pagenum class"><a href="..." data-type="xref" data-xref-pagenum-style="..." class="pagenum">...</a></x:expect>
   </x:scenario>
  </x:scenario>
  <!-- TOOLSREQ-6431 ends -->
</x:description>
